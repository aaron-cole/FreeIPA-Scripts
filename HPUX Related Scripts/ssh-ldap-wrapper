#!/usr/bin/sh

##########################################################
# /usr/local/bin/ssh-ldap-wrapper
# 
# This script was created to connected to RedHat IDM server
# also known as a freeipa server, for ssh certificate logins
# to work.  This script will search the idm server for the
# user name ($1) as passwd by sshd (hpux secure shell) 
# and return the ssh rsa-key for the user, to be compared by
# sshd for login.  
#
# Still working on pulling certificate and getting key from it.
#
# 
# Modification of this file is very bad and will stop ssh logins 
# from happening, unless using in a different environment.
# Otherwise modify the variables as needed.
#
# This is valid for HPUX 11.31 and no other OS.
# Do not use on a different OS.
#
# Change all places with example.com or dc=example,dc=com to 
# Reflect you structure
#
# This file was created:
# By Aaron Cole
#                                                                                                                    
# Date:
# 8/4/2016
#
# Change Log:                                                                                                        
# 8/4/2016: Initial Creation
# 3/6/2017: Version 1.1
#           -Skip local users
#                -dynamic server lookup instead of hardcoded
# 7/10/2017: Version 1.2
#                -Check for HBAC rules and allow users
#                 Based on those.
# 7/21/2017: Version 1.3
#                -Sped up script 
#                 Skip rules if explicit deny was found
#                 Skip rules if user is allowed and allow rule
#                 Replaced certain if statements with case statments. 
# 9/28/2017: Version 1.4
#                 -To speed up dump entries to temp file
#                  and compare entries in there vs comparing entries
#                  in ldap.  
#
# 10/2/2017: Version 1.4.1
#                 -Add PID to name of temp files to avoid issues with more
#                  than one account login at the same time.  Tweak temp file
#                  cleanup.  Add filters to searches rather than looking in
#                  script.  Move some stuff in to functions.
##########################################################
#Exit if there is not an argument
#argument = username

if [ -z $1 ]; then
        exit 2
fi

#Version 1.1
# Trailing colon is very important
if grep ^$1: /etc/passwd >/dev/null; then
 exit 0
fi

#Variables
#Change These variables#
#Proxy User information
userdn="uid=proxyagent,ou=profile,dc=example,dc=com"
userpass="P@ssW0rd!!P@ssW0rd"

#DN's for freeipa structure - only change dc part
basedn="dc=example,dc=com"
hbacdn="cn=hbac,dc=example,dc=com"
compdn="cn=computers,cn=accounts,dc=example,dc=com"
hostgroupdn="cn=hostgroups,cn=accounts,dc=example,dc=com"
usrgrpdn="cn=groups,cn=accounts,dc=example,dc=com"

#Server list#
#Uncomment 1 section below#
# Option 1 - get from DNS
server="$(/usr/bin/nslookup -type=SRV _ldap._tcp.example.com | grep host | awk '{print $3}' | sed -n 2p)"

# Option 2 - get from the ldap profile
#change min/max values - setup to use 3 idm servers (most hpux profile can support

#rand_numb="$(awk -v min=2 -v max=4 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')"
#server="$(grep preferredServerList /etc/opt/ldapux/ldapux_profile.ldif | cut -f $rand_numb -d " " | cut -f 1 -d ":")"
##########################################################

uid="$1"
my_pid=$$
temp_hbac_rule="/tmp/hbac_temp.$my_pid"
rule_file="/tmp/rule_file.$my_pid"

main_ldap_filter_allow="(&(objectClass=ipahbacrule)(ipaEnabledFlag=TRUE)(accessRuleType=allow)(|(serviceCategory=all)(memberService=sshd)))"
main_ldap_filter_deny="(&(objectClass=ipahbacrule)(ipaEnabledFlag=TRUE)(accessRuleType=deny)(|(serviceCategory=all)(memberService=sshd)))"

userallow=0

##########################################################
#Do not change below this
##########################################################

check_rule()
{

 #Dump rule to file so we can check it
 /opt/ldapux/bin/ldapsearch -b $hbacdn -B -x -h $server -D $userdn -w $userpass cn=$rule > $rule_file
    
 #Check if rule applies to host - hostname hostgroup or all
 #This is all
 hostpass=0
 if [ "$(grep "^hostCategory" $rule_file | cut -f 2 -d "=")" = "all" ] ; then
  hostpass=1
  #This is member host
 else
   temphostname=$(hostname)
     lowerhostname="$(echo $temphostname | tr '[A-Z]' '[a-z]')"
     underlowhostname="$(echo $lowerhostname | tr '_' '-')"
     for memberhostentry in $(grep "memberHost" $rule_file); do
       if [ $hostpass = "0" ]; then
         case $memberhostentry in

                #hostname match
                memberHost=fqdn=$underlowhostname*) 
                   hostpass=1
                   ;;
                
                #non fqdn entries
                memberHost=cn=*) 
                   testgroup="$(echo $memberhostentry | cut -f 1 -d "," | cut -c 12- )"
                   if /opt/ldapux/bin/ldapsearch -b $hostgroupdn -x -h $server -D $userdn -w $userpass $testgroup | grep "fqdn=$lowerhostname" > /dev/null; then
                      hostpass=1
                   fi
                   ;;

         esac
       fi
     done
 fi #End of member host rule
        
 #check member users
 usercheck=0
 if [ $hostpass -ge 1 ]; then
     if [ "$(grep "userCategory" $rule_file | cut -f 2 -d "=")" = "all" ] ; then
      #All users a memebers is userCategory is all
      usercheck=1
     else
       # Loop over the memberUsers.  Could be a user or a group
       for memberuserentry in $(grep "memberUser" $rule_file ); do
         if [ $usercheck -eq 0 ]; then
           case $memberuserentry in
             #hostname user - Added comma below to ensure right username is processed
              memberUser=uid=$uid,*)
                 usercheck=1
                 ;;
                
              #Check if user is part of a group on the rule
              memberUser=cn=*)
                 testgroup="$(echo $memberuserentry | cut -f 1 -d "," | cut -c 15- )"
                 # If we can, use ldapuglist, it uses the clientd cache
                 if /opt/ldapux/bin/ldapuglist -t group -n $testgroup | grep "memberUid: $uid" > /dev/null; then
                   usercheck=1
                 fi
                 ;;

           esac
         fi
       done
     fi 
 fi  

}

#Exit on bad usernames
if ! expr "$uid" : '[a-zA-Z0-9._-]*$' 1>/dev/null; then
# Debug only
#       echo "ssh-ldap-wrapper err "bad characters in username: $uid" >> /var/adm/ssh-ldap-wrapper.log
        exit 2
fi

#only get enabled rules to cut down on later searchs
#For each Rule
for rule in $(/opt/ldapux/bin/ldapsearch -b $hbacdn -x -h $server -D $userdn -w $userpass "$main_ldap_filter_allow" cn | grep "^cn:"  | cut -d " " -f 2); do 

  #Version 1.3 - Process if user hasn't been allowed already 
  if  [ "$userallow" -eq 0 ]; then

     check_rule

     if [ "$usercheck" -eq 1 ]; then
        userallow=1
     fi

   fi # End of processing if user is already allowed and rule is allow
done

#done with allow rules.  Since the default is deny if we didn't find any
# that matched, then go no further and dump the user out.
if [ "$userallow" -eq 0 ] ; then
  rm -rf $rule_file > /dev/null 2>&1
  exit 2
fi

# Now check to see if we have any deny rules and if at least one matches.
#only get enabled rules to cut down on later searchs

usercheck=0 
#For each Rule
for rule in $(/opt/ldapux/bin/ldapsearch -b $hbacdn -x -h $server -D $userdn -w $userpass "$main_ldap_filter_deny" cn | grep "^cn:"  | cut -d " " -f 2); do

     check_rule

     if [ "$usercheck" -eq 1 ]; then
        # This deny rule matched, just cleanup and dump out with error
        rm -rf $rule_file > /dev/null 2>&1
        exit 2
     fi

done


# User is allowed to login, pull the pubkey.  Echo to stdout will pass 
# it back to our caller, the sshd process.

if [ "$userallow" -ge 1 ]; then
 keys="$(/opt/ldapux/bin/ldapsearch -b $basedn -B -x -h $server -D $userdn -w $userpass "(&(uid=$uid)(ipaSshPubKey=*))" 'ipaSshPubKey' | grep ipaSshPubKey | cut -c 14- )"
 echo "$keys"
fi

#Cleanup
rm -rf $rule_file > /dev/null 2>&1
